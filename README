Class to read images from high speed and scientific cameras in Python
    
    @author Daniel Duke <daniel.duke@monash.edu>
    @copyright (c) 2017 LTRAC
    @license GPL-3.0+
    @version 0.1.0
    @date 31/12/2017
    
    Laboratory for Turbulence Research in Aerospace & Combustion (LTRAC)
    Monash University, Australia

    Many scientific cameras have 10 or 12 bit sensors. Most camera APIs/software require
    the user to choose between 8 or 16 bit depth when saving to an easily-readable format
    such as TIFF. Saving a 10-bit depth pixel value into a 16-bit unsigned int can rapidly
    blow out the file size, leading to wasted storage space and much slower rates of file
    transfer off the camera and onto a local drive ( a major laboratory bottleneck! )  

    Most cameras have an ability to save data to raw binary or to unusual, compact file
    formats such as 12-bit TIFF. This is by far the fastest way of getting lots of data
    off a camera, as no bits are wasted. I've had trouble finding software that can read 
    these files, and most graphics packages (even ImageJ!) struggle to correctly read
    files like 16/32 bit RGB TIFF for example. This Python package solves that problem.
    
    pySciCam is an attempt to build an easy to use, all in one solutiuon to allow
    researchers to convert their scientific camera's binary data file or unusual 
    solution to allow researchers to quickly convert their camera's binary files or
    unusual / native TIFF and bitmap formats into NumPy arrays in a single line of code.
    It achieves this by using cython (C) modules for fast reading of RAW blobs, and
    parallelized ImageMagick / Pillow for standardised formats like TIFF. Movie support
    via ffmpeg library is also included.
    
    Current support for:
        - 8, 12, 16, 32 & 64-bit RGB or Mono TIFF using PythonMagick (most cameras)
        - 12 & 16 bit packed RAW (Chronos monochrome cameras)
        - Any greyscale movies supported by the ffmpeg library
        - PCO B16 scientific data format for double-exposed (PIV) images
        - 8 & 16 bit RGB TIFF using Pillow library (Most colour cameras)
        - 8 & 16 bit Mono TIFF using Pillow library (Most monochrome cameras)
    
    Multi-file images sequences are read using parallel I/O for best performance
    on machines with very fast read speeds (ie SSD, RAID). If this is detrimental,
    (ie magnetic/tape drive), pass the keyword arg IO_threads=1 for serial I/O.
    
    Wide compatibility for sequences of images is achieved using PythonMagick
    bindings to ImageMagick. If this is not available on the system, Pillow can be
    used, which is easier to install. However, Pillow only supports 8-bit RGB, and
    8,16,32 bit greyscale.
    
    EXAMPLE USAGE:
    
        # Read sequence of images from a directory
        data = pySciCam.ImageSequence("/directory/of/images")
        
        # Read a movie, and get just the first 25 frames
        data = pySciCam.ImageSequence("movie.mp4",frames=(0,25))
        
        # Read a RAW binary blob from a particular camera
        data = pySciCam.ImageSequence("foo.raw",rawtype='bar_cam')
        
        # Print pixel values of the 10th frame of monochrome data
        from matplotlib import pyplot
        pyplot.imshow(data.arr[9,...])
        plt.show()
        
        # Print green channel values for 10th frame of RGB data
        pyplot.imshow(data.arr[9,1,...])
        plt.show()
        
    KEYWORD ARGS FOR ImageSequence CLASS:
        frames:
            2-tuple of form (start,end) to trim a range of frames.
        
        width, height:
            provide prespecified image dimensions for RAW formats
            that don't specify it
                       
        rawtype:
            string describing the format of a RAW (binary) file
        
        dtype:
            force the destination array to a certain data type, for
            example numpy.uint8 or numpy.uint16.
            The reader will autodetect the dtype based on the
            source file. For very large image sets, upsampling can lead
            to memory issues. In this case the dtype can be restricted
            using this argument.
        
        monochrome:
            boolean. If the image set is from a colour camera,
            this will sum all the colour channels together during
            the reading process to reduce the size of the array.
    
    Future support planned for:
    - B16dat files (add subroutine to cython library)
    - Header scanline in Chronos RAW, when firmware supports it.
    - Shimadzu HPV custom format
    - Other Photron raw exporter formats
    - Other PCO DIMAX raw exporter formats
    - Motion Pro / Redlake raw formats
    contact me if you have any specific suggestions. Please provide a sample file!
    
    TO DO:
    - Make documentation for class.
    - Proper header documentation and README, LICENSE etc.
    - Get distutils working to build as an installable package.

    INSTALLATION:
    - Ensure you have a working Python setup. Code has been tested on Python 2.7, not Python 3 yet.
      You may wish to set up a development environment (I like conda)
    - Install mandatory python modules using either easy_install, pip, or conda
	numpy, tqdm, natsort, joblib
    - Install optional python modules to provide further compatibility/enhancement
        imageio (movie formats)
        pillow (conventional image file formats)
    - Install ImageMagick
      Use package manager (apt, yum) in Linux or use homebrew on MacOS
    - Install PythonMagick 
      (get source from https://github.com/ImageMagick/PythonMagick or clone 
      with `git clone https://github.com/ImageMagick/PythonMagick.git')
      this library will require 'boost-python', 'imagemagick', and python2.5 or later,
      as well as working c/c++ compilers.
      Build the module with ./configure; make; make install. 
      nb. On MacOS I had weird compiler errors when boost-python wasn't installed 
       - it didn't warn during configure!
      I'm using miniconda2 dev environment and had to manually modify Makefile to point    
      these to the right site-packages:
         pyexecdir = /Users/dduke/miniconda2/lib/python2.7/site-packages
	 pythondir = /Users/dduke/miniconda2/lib/python2.7/site-packages 
    - Check that the above modules load without errors
        python2.7 -c 'import PythonMagick'
        If you have trouble, Stack Oveflow is your friend!
